"""normalize_remaining_status_fields

Revision ID: 1492e2d3f261
Revises: create_medical_referrals_table
Create Date: 2025-07-05 23:51:24.452073

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1492e2d3f261'
down_revision: Union[str, None] = 'create_medical_referrals_table'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_medical_referrals_id', table_name='medical_referrals')
    op.drop_index('ix_medical_referrals_status_type_id', table_name='medical_referrals')
    op.drop_table('medical_referrals')
    op.drop_table('activity_participation')
    op.drop_table('activities')
    op.drop_table('activity_types')
    op.add_column('caregiver_assignments', sa.Column('status_type_id', sa.Integer(), nullable=True))
    op.create_index(op.f('ix_caregiver_assignments_status_type_id'), 'caregiver_assignments', ['status_type_id'], unique=False)
    op.create_foreign_key(None, 'caregiver_assignments', 'status_types', ['status_type_id'], ['id'])
    op.drop_column('caregiver_assignments', 'status')
    op.add_column('referral_commissions', sa.Column('status_type_id', sa.Integer(), nullable=True))
    op.create_index(op.f('ix_referral_commissions_status_type_id'), 'referral_commissions', ['status_type_id'], unique=False)
    op.create_foreign_key(None, 'referral_commissions', 'status_types', ['status_type_id'], ['id'])
    op.drop_column('referral_commissions', 'status')
    op.add_column('referrals', sa.Column('status_type_id', sa.Integer(), nullable=True))
    op.create_index(op.f('ix_referrals_status_type_id'), 'referrals', ['status_type_id'], unique=False)
    op.create_foreign_key(None, 'referrals', 'status_types', ['status_type_id'], ['id'])
    op.drop_column('referrals', 'status')
    op.add_column('reminders', sa.Column('status_type_id', sa.Integer(), nullable=True))
    op.create_index(op.f('ix_reminders_status_type_id'), 'reminders', ['status_type_id'], unique=False)
    op.create_foreign_key(None, 'reminders', 'status_types', ['status_type_id'], ['id'])
    op.drop_column('reminders', 'status')
    op.add_column('service_subscriptions', sa.Column('status_type_id', sa.Integer(), nullable=True))
    op.create_index(op.f('ix_service_subscriptions_status_type_id'), 'service_subscriptions', ['status_type_id'], unique=False)
    op.create_foreign_key(None, 'service_subscriptions', 'status_types', ['status_type_id'], ['id'])
    op.drop_column('service_subscriptions', 'status')
    op.add_column('shift_observations', sa.Column('hygiene_status_type_id', sa.Integer(), nullable=True, comment='Estado de higiene normalizado'))
    op.add_column('shift_observations', sa.Column('catheter_status_type_id', sa.Integer(), nullable=True, comment='Estado de catéter normalizado'))
    op.add_column('shift_observations', sa.Column('status_type_id', sa.Integer(), nullable=True, comment='Estado normalizado'))
    op.create_index(op.f('ix_shift_observations_catheter_status_type_id'), 'shift_observations', ['catheter_status_type_id'], unique=False)
    op.create_index(op.f('ix_shift_observations_hygiene_status_type_id'), 'shift_observations', ['hygiene_status_type_id'], unique=False)
    op.create_index(op.f('ix_shift_observations_status_type_id'), 'shift_observations', ['status_type_id'], unique=False)
    op.create_foreign_key(None, 'shift_observations', 'status_types', ['status_type_id'], ['id'])
    op.create_foreign_key(None, 'shift_observations', 'status_types', ['catheter_status_type_id'], ['id'])
    op.create_foreign_key(None, 'shift_observations', 'status_types', ['hygiene_status_type_id'], ['id'])
    op.drop_column('shift_observations', 'status')
    op.drop_column('shift_observations', 'hygiene_status')
    op.drop_column('shift_observations', 'catheter_status')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('shift_observations', sa.Column('catheter_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Estado de catéter: none, foley, suprapubic, condom'))
    op.add_column('shift_observations', sa.Column('hygiene_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Estado de higiene: excellent, good, fair, poor'))
    op.add_column('shift_observations', sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Estado: draft, completed, reviewed, archived'))
    op.drop_constraint(None, 'shift_observations', type_='foreignkey')
    op.drop_constraint(None, 'shift_observations', type_='foreignkey')
    op.drop_constraint(None, 'shift_observations', type_='foreignkey')
    op.drop_index(op.f('ix_shift_observations_status_type_id'), table_name='shift_observations')
    op.drop_index(op.f('ix_shift_observations_hygiene_status_type_id'), table_name='shift_observations')
    op.drop_index(op.f('ix_shift_observations_catheter_status_type_id'), table_name='shift_observations')
    op.drop_column('shift_observations', 'status_type_id')
    op.drop_column('shift_observations', 'catheter_status_type_id')
    op.drop_column('shift_observations', 'hygiene_status_type_id')
    op.add_column('service_subscriptions', sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'service_subscriptions', type_='foreignkey')
    op.drop_index(op.f('ix_service_subscriptions_status_type_id'), table_name='service_subscriptions')
    op.drop_column('service_subscriptions', 'status_type_id')
    op.add_column('reminders', sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'reminders', type_='foreignkey')
    op.drop_index(op.f('ix_reminders_status_type_id'), table_name='reminders')
    op.drop_column('reminders', 'status_type_id')
    op.add_column('referrals', sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'referrals', type_='foreignkey')
    op.drop_index(op.f('ix_referrals_status_type_id'), table_name='referrals')
    op.drop_column('referrals', 'status_type_id')
    op.add_column('referral_commissions', sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'referral_commissions', type_='foreignkey')
    op.drop_index(op.f('ix_referral_commissions_status_type_id'), table_name='referral_commissions')
    op.drop_column('referral_commissions', 'status_type_id')
    op.add_column('caregiver_assignments', sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'caregiver_assignments', type_='foreignkey')
    op.drop_index(op.f('ix_caregiver_assignments_status_type_id'), table_name='caregiver_assignments')
    op.drop_column('caregiver_assignments', 'status_type_id')
    op.create_table('activity_types',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('type_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('requirements', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='activity_types_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('activities',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('cared_person_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('activity_type_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('activity_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('difficulty_level', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['activity_type_id'], ['activity_types.id'], name='activities_activity_type_id_fkey'),
    sa.ForeignKeyConstraint(['cared_person_id'], ['cared_persons.id'], name='activities_cared_person_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='activities_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('activity_participation',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('shift_observation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('activity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('participation_level', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('enjoyment_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['activity_id'], ['activities.id'], name='activity_participation_activity_id_fkey'),
    sa.ForeignKeyConstraint(['shift_observation_id'], ['shift_observations.id'], name='activity_participation_shift_observation_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='activity_participation_pkey')
    )
    op.create_table('medical_referrals',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('cared_person_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('referral_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('referred_by', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('referred_to', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('referral_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('appointment_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('insurance_info', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['cared_person_id'], ['cared_persons.id'], name='medical_referrals_cared_person_id_fkey'),
    sa.ForeignKeyConstraint(['status_type_id'], ['status_types.id'], name='medical_referrals_status_type_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='medical_referrals_pkey')
    )
    op.create_index('ix_medical_referrals_status_type_id', 'medical_referrals', ['status_type_id'], unique=False)
    op.create_index('ix_medical_referrals_id', 'medical_referrals', ['id'], unique=False)
    # ### end Alembic commands ###
