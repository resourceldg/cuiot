"""add_packages_and_personalization

Revision ID: 5dbfd8ba302e
Revises: a029f1d4890d
Create Date: 2025-06-30 07:25:52.002396

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5dbfd8ba302e'
down_revision: Union[str, None] = 'a029f1d4890d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('package_add_ons',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('add_on_type', sa.String(length=50), nullable=False),
    sa.Column('price_monthly', sa.Integer(), nullable=False),
    sa.Column('price_yearly', sa.Integer(), nullable=True),
    sa.Column('configuration', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('limitations', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('compatible_packages', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('max_quantity', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_package_add_ons_add_on_type'), 'package_add_ons', ['add_on_type'], unique=False)
    op.create_index(op.f('ix_package_add_ons_id'), 'package_add_ons', ['id'], unique=False)
    op.create_index(op.f('ix_package_add_ons_name'), 'package_add_ons', ['name'], unique=False)
    op.create_table('packages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('package_type', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('price_monthly', sa.Integer(), nullable=False),
    sa.Column('price_yearly', sa.Integer(), nullable=True),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('max_users', sa.Integer(), nullable=True),
    sa.Column('max_devices', sa.Integer(), nullable=True),
    sa.Column('max_storage_gb', sa.Integer(), nullable=True),
    sa.Column('features', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('limitations', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('customizable_options', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('add_ons_available', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('base_configuration', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_customizable', sa.Boolean(), nullable=False),
    sa.Column('support_level', sa.String(length=50), nullable=True),
    sa.Column('response_time_hours', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_featured', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_packages_id'), 'packages', ['id'], unique=False)
    op.create_index(op.f('ix_packages_name'), 'packages', ['name'], unique=False)
    op.create_index(op.f('ix_packages_package_type'), 'packages', ['package_type'], unique=False)
    op.create_table('user_packages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('package_id', sa.UUID(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('auto_renew', sa.Boolean(), nullable=False),
    sa.Column('billing_cycle', sa.String(length=20), nullable=False),
    sa.Column('current_amount', sa.Integer(), nullable=False),
    sa.Column('next_billing_date', sa.Date(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('custom_configuration', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('selected_features', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('custom_limits', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('legal_capacity_verified', sa.Boolean(), nullable=False),
    sa.Column('legal_representative_id', sa.UUID(), nullable=True),
    sa.Column('verification_date', sa.DateTime(), nullable=True),
    sa.Column('referral_code_used', sa.String(length=20), nullable=True),
    sa.Column('referral_commission_applied', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['legal_representative_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['package_id'], ['packages.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_packages_id'), 'user_packages', ['id'], unique=False)
    op.create_table('user_package_add_ons',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_package_id', sa.UUID(), nullable=False),
    sa.Column('add_on_id', sa.UUID(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('custom_configuration', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('current_amount', sa.Integer(), nullable=False),
    sa.Column('billing_cycle', sa.String(length=20), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('added_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['add_on_id'], ['package_add_ons.id'], ),
    sa.ForeignKeyConstraint(['user_package_id'], ['user_packages.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_package_add_ons_id'), 'user_package_add_ons', ['id'], unique=False)
    op.add_column('billing_records', sa.Column('user_package_id', sa.UUID(), nullable=True))
    op.create_foreign_key(None, 'billing_records', 'user_packages', ['user_package_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'billing_records', type_='foreignkey')
    op.drop_column('billing_records', 'user_package_id')
    op.drop_index(op.f('ix_user_package_add_ons_id'), table_name='user_package_add_ons')
    op.drop_table('user_package_add_ons')
    op.drop_index(op.f('ix_user_packages_id'), table_name='user_packages')
    op.drop_table('user_packages')
    op.drop_index(op.f('ix_packages_package_type'), table_name='packages')
    op.drop_index(op.f('ix_packages_name'), table_name='packages')
    op.drop_index(op.f('ix_packages_id'), table_name='packages')
    op.drop_table('packages')
    op.drop_index(op.f('ix_package_add_ons_name'), table_name='package_add_ons')
    op.drop_index(op.f('ix_package_add_ons_id'), table_name='package_add_ons')
    op.drop_index(op.f('ix_package_add_ons_add_on_type'), table_name='package_add_ons')
    op.drop_table('package_add_ons')
    # ### end Alembic commands ###
