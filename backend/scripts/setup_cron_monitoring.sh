#!/bin/bash
"""
Cron Job Setup for Database Monitoring
=====================================

This script sets up automated cron jobs for database monitoring with
configurable intervals for different environments.

CONFIGURATION:
- Health Check: Every 5 minutes (configurable)
- Cleanup: Every 15 minutes (configurable)
- Log Rotation: Daily at 2 AM
- Emergency Alerts: When critical issues detected

USAGE:
    ./setup_cron_monitoring.sh [OPTIONS]

OPTIONS:
    --install          Install cron jobs
    --uninstall        Remove cron jobs
    --status           Check cron job status
    --test             Test cron job execution
    --config           Show configuration

EXAMPLES:
    # Install monitoring cron jobs
    ./setup_cron_monitoring.sh --install
    
    # Check status
    ./setup_cron_monitoring.sh --status
    
    # Test execution
    ./setup_cron_monitoring.sh --test

AUTHOR: AI Assistant
VERSION: 1.0.0
"""

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
MONITOR_SCRIPT="/app/scripts/db_monitor_simple.py"
CRON_FILE="/tmp/db_monitor_cron"
LOG_DIR="/tmp/db_monitor_logs"

# Intervals (in minutes)
HEALTH_CHECK_INTERVAL=5
CLEANUP_INTERVAL=15
LOG_ROTATION_HOUR=2

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_debug() {
    echo -e "${BLUE}[DEBUG]${NC} $1"
}

# Check if running in Docker
check_docker() {
    if [[ -f /.dockerenv ]] || grep -q docker /proc/1/cgroup 2>/dev/null; then
        return 0
    else
        return 1
    fi
}

# Install cron jobs
install_cron_jobs() {
    log_info "Installing database monitoring cron jobs..."
    
    # Create log directory
    mkdir -p "$LOG_DIR"
    
    # Create cron file
    cat > "$CRON_FILE" << EOF
# Database Monitoring Cron Jobs
# Generated by setup_cron_monitoring.sh
# Health check every $HEALTH_CHECK_INTERVAL minutes
*/$HEALTH_CHECK_INTERVAL * * * * docker exec viejos_trapos_backend python3 $MONITOR_SCRIPT --health >> $LOG_DIR/health.log 2>&1

# Cleanup every $CLEANUP_INTERVAL minutes
*/$CLEANUP_INTERVAL * * * * docker exec viejos_trapos_backend python3 $MONITOR_SCRIPT --cleanup >> $LOG_DIR/cleanup.log 2>&1

# Log rotation daily at $LOG_ROTATION_HOUR AM
0 $LOG_ROTATION_HOUR * * * find $LOG_DIR -name "*.log" -mtime +7 -delete

# Emergency alert check (if health check fails)
*/$HEALTH_CHECK_INTERVAL * * * * docker exec viejos_trapos_backend python3 $MONITOR_SCRIPT --health | grep -q "critical" && echo "CRITICAL: Database health check failed at \$(date)" >> $LOG_DIR/emergency.log
EOF
    
    # Install cron jobs
    if check_docker; then
        # Running inside Docker - use host cron
        log_warn "Running inside Docker - cron jobs will be installed on host"
        log_info "Cron file created: $CRON_FILE"
        log_info "To install on host, run: sudo crontab $CRON_FILE"
    else
        # Running on host
        crontab "$CRON_FILE"
        log_info "Cron jobs installed successfully"
    fi
    
    log_info "Cron jobs configured:"
    log_info "  - Health check: Every $HEALTH_CHECK_INTERVAL minutes"
    log_info "  - Cleanup: Every $CLEANUP_INTERVAL minutes"
    log_info "  - Log rotation: Daily at $LOG_ROTATION_HOUR AM"
}

# Uninstall cron jobs
uninstall_cron_jobs() {
    log_info "Uninstalling database monitoring cron jobs..."
    
    if check_docker; then
        log_warn "Running inside Docker - remove cron jobs manually from host"
        log_info "To remove from host, run: sudo crontab -l | grep -v 'db_monitor' | crontab -"
    else
        # Remove cron jobs
        crontab -l 2>/dev/null | grep -v "db_monitor" | crontab -
        log_info "Cron jobs removed successfully"
    fi
    
    # Remove cron file
    rm -f "$CRON_FILE"
    log_info "Cron file removed"
}

# Check cron job status
check_status() {
    log_info "Checking cron job status..."
    
    echo "=== Database Monitoring Cron Jobs Status ==="
    
    if check_docker; then
        echo -e "Environment: ${YELLOW}Docker Container${NC}"
        echo "Cron jobs must be installed on host system"
        echo "Cron file: $CRON_FILE"
    else
        echo -e "Environment: ${GREEN}Host System${NC}"
        
        # Check if cron jobs are installed
        if crontab -l 2>/dev/null | grep -q "db_monitor"; then
            echo -e "Status: ${GREEN}INSTALLED${NC}"
            echo "Active cron jobs:"
            crontab -l | grep "db_monitor"
        else
            echo -e "Status: ${RED}NOT INSTALLED${NC}"
        fi
    fi
    
    # Check log files
    if [[ -d "$LOG_DIR" ]]; then
        echo -e "Log Directory: ${GREEN}EXISTS${NC}"
        echo "Log files:"
        ls -la "$LOG_DIR" 2>/dev/null || echo "  No log files found"
    else
        echo -e "Log Directory: ${RED}MISSING${NC}"
    fi
    
    echo "================================"
}

# Test cron job execution
test_execution() {
    log_info "Testing cron job execution..."
    
    echo "=== Testing Health Check ==="
    docker exec viejos_trapos_backend python3 "$MONITOR_SCRIPT" --health
    
    echo ""
    echo "=== Testing Cleanup ==="
    docker exec viejos_trapos_backend python3 "$MONITOR_SCRIPT" --cleanup
    
    echo ""
    echo "=== Testing Emergency ==="
    echo "Emergency shutdown test (will not actually kill processes):"
    docker exec viejos_trapos_backend python3 -c "
import psycopg2
conn = psycopg2.connect(host='postgres', database='viejos_trapos_db', user='viejos_trapos_user', password='viejos_trapos_pass')
cur = conn.cursor()
cur.execute('SELECT count(*) FROM pg_stat_activity WHERE state != \\'idle\\'')
active = cur.fetchone()[0]
cur.execute('SELECT count(*) FROM pg_locks WHERE NOT granted')
blocked = cur.fetchone()[0]
conn.close()
print(f'Active processes: {active}')
print(f'Blocked locks: {blocked}')
if active > 10 or blocked > 0:
    print('⚠️  Would trigger emergency procedures')
else:
    print('✅ No emergency needed')
"
}

# Show configuration
show_config() {
    log_info "Current configuration..."
    
    echo "=== Database Monitoring Configuration ==="
    echo "Script: $MONITOR_SCRIPT"
    echo "Cron File: $CRON_FILE"
    echo "Log Directory: $LOG_DIR"
    echo ""
    echo "Intervals:"
    echo "  Health Check: Every $HEALTH_CHECK_INTERVAL minutes"
    echo "  Cleanup: Every $CLEANUP_INTERVAL minutes"
    echo "  Log Rotation: Daily at $LOG_ROTATION_HOUR AM"
    echo ""
    echo "Environment:"
    if check_docker; then
        echo "  Running in Docker container"
        echo "  Cron jobs must be installed on host"
    else
        echo "  Running on host system"
        echo "  Cron jobs can be installed directly"
    fi
    echo "================================"
}

# Start continuous monitoring
start_continuous_monitoring() {
    log_info "Starting continuous monitoring daemon..."
    
    # Check if already running
    if docker exec viejos_trapos_backend pgrep -f "db_monitor_simple.py" > /dev/null 2>&1; then
        log_warn "Continuous monitoring is already running"
        return
    fi
    
    # Start monitoring daemon
    docker exec -d viejos_trapos_backend python3 "$MONITOR_SCRIPT" --monitor
    
    # Wait and check
    sleep 2
    if docker exec viejos_trapos_backend pgrep -f "db_monitor_simple.py" > /dev/null 2>&1; then
        log_info "Continuous monitoring started successfully"
    else
        log_error "Failed to start continuous monitoring"
    fi
}

# Stop continuous monitoring
stop_continuous_monitoring() {
    log_info "Stopping continuous monitoring daemon..."
    
    # Kill monitoring processes
    docker exec viejos_trapos_backend pkill -f "db_monitor_simple.py" 2>/dev/null || true
    
    log_info "Continuous monitoring stopped"
}

# Show help
show_help() {
    echo "Cron Job Setup for Database Monitoring"
    echo ""
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "COMMANDS:"
    echo "  --install          Install cron jobs"
    echo "  --uninstall        Remove cron jobs"
    echo "  --status           Check cron job status"
    echo "  --test             Test cron job execution"
    echo "  --config           Show configuration"
    echo "  --start-daemon     Start continuous monitoring"
    echo "  --stop-daemon      Stop continuous monitoring"
    echo "  --help             Show this help"
    echo ""
    echo "EXAMPLES:"
    echo "  # Install cron jobs"
    echo "  $0 --install"
    echo ""
    echo "  # Start continuous monitoring"
    echo "  $0 --start-daemon"
    echo ""
    echo "  # Check status"
    echo "  $0 --status"
}

# Main function
main() {
    case "${1:-}" in
        --install)
            install_cron_jobs
            ;;
        --uninstall)
            uninstall_cron_jobs
            ;;
        --status)
            check_status
            ;;
        --test)
            test_execution
            ;;
        --config)
            show_config
            ;;
        --start-daemon)
            start_continuous_monitoring
            ;;
        --stop-daemon)
            stop_continuous_monitoring
            ;;
        --help|-h|"")
            show_help
            ;;
        *)
            log_error "Unknown command: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
}

# Run main function
main "$@" 