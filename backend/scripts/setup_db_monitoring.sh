#!/bin/bash
"""
Database Monitoring System Setup Script
======================================

This script sets up a comprehensive database monitoring system for the
Viejos Son Los Trapos project. It includes:

1. Production-ready monitoring daemon
2. Automated cleanup scripts
3. Emergency shutdown capabilities
4. Comprehensive logging
5. Cron job automation
6. Health check endpoints

FEATURES:
- Real-time database health monitoring
- Automatic cleanup of problematic processes
- Emergency shutdown capability
- Self-destruct mechanism
- Configurable thresholds
- Production-safe operations
- Comprehensive logging

USAGE:
    ./setup_db_monitoring.sh [OPTIONS]

OPTIONS:
    --install          Install monitoring system
    --uninstall        Remove monitoring system
    --start            Start monitoring daemon
    --stop             Stop monitoring daemon
    --status           Check monitoring status
    --emergency        Emergency shutdown
    --self-destruct    Self-destruct monitoring
    --health-check     Perform health check
    --cleanup          Perform cleanup
    --logs             Show recent logs
    --config           Show configuration

EXAMPLES:
    # Install and start monitoring
    ./setup_db_monitoring.sh --install --start
    
    # Emergency shutdown
    ./setup_db_monitoring.sh --emergency
    
    # Check status
    ./setup_db_monitoring.sh --status
    
    # View logs
    ./setup_db_monitoring.sh --logs

AUTHOR: AI Assistant
VERSION: 1.0.0
LICENSE: MIT
"""

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
MONITOR_SCRIPT="$SCRIPT_DIR/db_monitor_production_ready.py"
PID_FILE="/var/run/db_monitor.pid"
LOG_FILE="/var/log/db_monitor.log"
CRON_FILE="/etc/cron.d/db_monitor"
SERVICE_FILE="/etc/systemd/system/db-monitor.service"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_debug() {
    echo -e "${BLUE}[DEBUG]${NC} $1"
}

# Check if running as root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        log_warn "Running as root - this is required for system-wide installation"
    else
        log_error "This script must be run as root for system-wide installation"
        log_info "Use: sudo $0 $*"
        exit 1
    fi
}

# Check if monitoring script exists
check_monitor_script() {
    if [[ ! -f "$MONITOR_SCRIPT" ]]; then
        log_error "Monitoring script not found: $MONITOR_SCRIPT"
        exit 1
    fi
}

# Create log directory
create_log_dir() {
    log_info "Creating log directory..."
    mkdir -p "$(dirname "$LOG_FILE")"
    touch "$LOG_FILE"
    chmod 644 "$LOG_FILE"
    log_info "Log file created: $LOG_FILE"
}

# Create PID directory
create_pid_dir() {
    log_info "Creating PID directory..."
    mkdir -p "$(dirname "$PID_FILE")"
    log_info "PID directory created: $(dirname "$PID_FILE")"
}

# Install monitoring system
install_monitoring() {
    log_info "Installing database monitoring system..."
    
    check_monitor_script
    create_log_dir
    create_pid_dir
    
    # Make script executable
    chmod +x "$MONITOR_SCRIPT"
    log_info "Made monitoring script executable"
    
    # Create systemd service
    create_systemd_service
    
    # Create cron job
    create_cron_job
    
    # Reload systemd
    systemctl daemon-reload
    
    log_info "Database monitoring system installed successfully"
}

# Create systemd service
create_systemd_service() {
    log_info "Creating systemd service..."
    
    cat > "$SERVICE_FILE" << EOF
[Unit]
Description=Database Monitoring System
After=network.target postgresql.service
Wants=postgresql.service

[Service]
Type=simple
User=root
Group=root
WorkingDirectory=$SCRIPT_DIR
ExecStart=/usr/bin/python3 $MONITOR_SCRIPT --monitor
ExecReload=/bin/kill -HUP \$MAINPID
ExecStop=/bin/kill -TERM \$MAINPID
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
SyslogIdentifier=db-monitor

# Environment variables
Environment=DB_HOST=postgres
Environment=DB_PORT=5432
Environment=DB_NAME=viejos_trapos_db
Environment=DB_USER=viejos_trapos_user
Environment=DB_PASSWORD=viejos_trapos_pass
Environment=DB_MONITOR_INTERVAL=300
Environment=DB_MONITOR_TIMEOUT=30
Environment=DB_MONITOR_MAX_CONNECTIONS=50
Environment=DB_MONITOR_MAX_LOCKS=100
Environment=DB_MONITOR_LOG_LEVEL=INFO
Environment=DB_MONITOR_LOG_FILE=$LOG_FILE
Environment=DB_MONITOR_PID_FILE=$PID_FILE

[Install]
WantedBy=multi-user.target
EOF
    
    log_info "Systemd service created: $SERVICE_FILE"
}

# Create cron job
create_cron_job() {
    log_info "Creating cron job..."
    
    cat > "$CRON_FILE" << EOF
# Database Monitoring Cron Jobs
# Generated by setup_db_monitoring.sh

# Health check every 5 minutes
*/5 * * * * root /usr/bin/python3 $MONITOR_SCRIPT --health-check >> $LOG_FILE 2>&1

# Cleanup every 15 minutes
*/15 * * * * root /usr/bin/python3 $MONITOR_SCRIPT --cleanup >> $LOG_FILE 2>&1

# Log rotation (keep last 7 days)
0 2 * * * root find /var/log -name "db_monitor.log*" -mtime +7 -delete

# Emergency check every hour
0 * * * * root /usr/bin/python3 $MONITOR_SCRIPT --health-check | grep -q "critical" && echo "CRITICAL ALERT: Database health check failed" | logger -t db-monitor
EOF
    
    chmod 644 "$CRON_FILE"
    log_info "Cron job created: $CRON_FILE"
}

# Uninstall monitoring system
uninstall_monitoring() {
    log_info "Uninstalling database monitoring system..."
    
    # Stop service
    stop_monitoring
    
    # Remove systemd service
    if [[ -f "$SERVICE_FILE" ]]; then
        systemctl disable db-monitor.service 2>/dev/null || true
        rm -f "$SERVICE_FILE"
        systemctl daemon-reload
        log_info "Systemd service removed"
    fi
    
    # Remove cron job
    if [[ -f "$CRON_FILE" ]]; then
        rm -f "$CRON_FILE"
        log_info "Cron job removed"
    fi
    
    # Remove PID file
    rm -f "$PID_FILE"
    
    log_info "Database monitoring system uninstalled"
}

# Start monitoring
start_monitoring() {
    log_info "Starting database monitoring..."
    
    if [[ -f "$SERVICE_FILE" ]]; then
        systemctl start db-monitor.service
        systemctl enable db-monitor.service
        log_info "Monitoring service started and enabled"
    else
        log_warn "Systemd service not found, starting manually..."
        nohup python3 "$MONITOR_SCRIPT" --monitor > "$LOG_FILE" 2>&1 &
        echo $! > "$PID_FILE"
        log_info "Monitoring started manually (PID: $(cat "$PID_FILE"))"
    fi
}

# Stop monitoring
stop_monitoring() {
    log_info "Stopping database monitoring..."
    
    if systemctl is-active --quiet db-monitor.service 2>/dev/null; then
        systemctl stop db-monitor.service
        systemctl disable db-monitor.service
        log_info "Monitoring service stopped and disabled"
    elif [[ -f "$PID_FILE" ]]; then
        PID=$(cat "$PID_FILE")
        if kill -0 "$PID" 2>/dev/null; then
            kill "$PID"
            log_info "Monitoring process killed (PID: $PID)"
        fi
        rm -f "$PID_FILE"
    else
        log_warn "No monitoring process found"
    fi
}

# Check monitoring status
check_status() {
    log_info "Checking monitoring status..."
    
    echo "=== Database Monitoring Status ==="
    
    # Check systemd service
    if systemctl is-active --quiet db-monitor.service 2>/dev/null; then
        echo -e "Service Status: ${GREEN}ACTIVE${NC}"
        systemctl status db-monitor.service --no-pager -l
    else
        echo -e "Service Status: ${RED}INACTIVE${NC}"
    fi
    
    # Check PID file
    if [[ -f "$PID_FILE" ]]; then
        PID=$(cat "$PID_FILE")
        if kill -0 "$PID" 2>/dev/null; then
            echo -e "Process Status: ${GREEN}RUNNING${NC} (PID: $PID)"
        else
            echo -e "Process Status: ${RED}DEAD${NC} (PID: $PID)"
        fi
    else
        echo -e "Process Status: ${YELLOW}NO PID FILE${NC}"
    fi
    
    # Check log file
    if [[ -f "$LOG_FILE" ]]; then
        echo -e "Log File: ${GREEN}EXISTS${NC} ($(wc -l < "$LOG_FILE") lines)"
    else
        echo -e "Log File: ${RED}MISSING${NC}"
    fi
    
    # Check cron job
    if [[ -f "$CRON_FILE" ]]; then
        echo -e "Cron Job: ${GREEN}INSTALLED${NC}"
    else
        echo -e "Cron Job: ${RED}MISSING${NC}"
    fi
    
    echo "================================"
}

# Emergency shutdown
emergency_shutdown() {
    log_error "ðŸš¨ EMERGENCY SHUTDOWN INITIATED!"
    
    # Stop monitoring
    stop_monitoring
    
    # Run emergency shutdown
    if [[ -f "$MONITOR_SCRIPT" ]]; then
        python3 "$MONITOR_SCRIPT" --emergency-shutdown
    fi
    
    log_error "ðŸš¨ Emergency shutdown completed"
}

# Self-destruct
self_destruct() {
    log_error "ðŸ’¥ SELF-DESTRUCT INITIATED!"
    
    # Stop monitoring
    stop_monitoring
    
    # Run self-destruct
    if [[ -f "$MONITOR_SCRIPT" ]]; then
        python3 "$MONITOR_SCRIPT" --self-destruct
    fi
    
    # Uninstall everything
    uninstall_monitoring
    
    log_error "ðŸ’¥ Self-destruct completed"
}

# Health check
health_check() {
    log_info "Performing health check..."
    
    if [[ -f "$MONITOR_SCRIPT" ]]; then
        python3 "$MONITOR_SCRIPT" --health-check
    else
        log_error "Monitoring script not found"
        exit 1
    fi
}

# Cleanup
cleanup() {
    log_info "Performing cleanup..."
    
    if [[ -f "$MONITOR_SCRIPT" ]]; then
        python3 "$MONITOR_SCRIPT" --cleanup
    else
        log_error "Monitoring script not found"
        exit 1
    fi
}

# Show logs
show_logs() {
    log_info "Showing recent logs..."
    
    if [[ -f "$LOG_FILE" ]]; then
        echo "=== Recent Database Monitor Logs ==="
        tail -n 50 "$LOG_FILE"
        echo "==================================="
    else
        log_error "Log file not found: $LOG_FILE"
    fi
}

# Show configuration
show_config() {
    log_info "Current configuration..."
    
    echo "=== Database Monitor Configuration ==="
    echo "Script: $MONITOR_SCRIPT"
    echo "PID File: $PID_FILE"
    echo "Log File: $LOG_FILE"
    echo "Cron File: $CRON_FILE"
    echo "Service File: $SERVICE_FILE"
    echo ""
    echo "Environment Variables:"
    echo "DB_HOST: ${DB_HOST:-postgres}"
    echo "DB_PORT: ${DB_PORT:-5432}"
    echo "DB_NAME: ${DB_NAME:-viejos_trapos_db}"
    echo "DB_MONITOR_INTERVAL: ${DB_MONITOR_INTERVAL:-300}"
    echo "DB_MONITOR_TIMEOUT: ${DB_MONITOR_TIMEOUT:-30}"
    echo "DB_MONITOR_MAX_CONNECTIONS: ${DB_MONITOR_MAX_CONNECTIONS:-50}"
    echo "DB_MONITOR_MAX_LOCKS: ${DB_MONITOR_MAX_LOCKS:-100}"
    echo "====================================="
}

# Main function
main() {
    case "${1:-}" in
        --install)
            check_root
            install_monitoring
            ;;
        --uninstall)
            check_root
            uninstall_monitoring
            ;;
        --start)
            check_root
            start_monitoring
            ;;
        --stop)
            check_root
            stop_monitoring
            ;;
        --status)
            check_status
            ;;
        --emergency)
            check_root
            emergency_shutdown
            ;;
        --self-destruct)
            check_root
            self_destruct
            ;;
        --health-check)
            health_check
            ;;
        --cleanup)
            cleanup
            ;;
        --logs)
            show_logs
            ;;
        --config)
            show_config
            ;;
        --help|-h|"")
            echo "Database Monitoring System Setup Script"
            echo ""
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "OPTIONS:"
            echo "  --install          Install monitoring system"
            echo "  --uninstall        Remove monitoring system"
            echo "  --start            Start monitoring daemon"
            echo "  --stop             Stop monitoring daemon"
            echo "  --status           Check monitoring status"
            echo "  --emergency        Emergency shutdown"
            echo "  --self-destruct    Self-destruct monitoring"
            echo "  --health-check     Perform health check"
            echo "  --cleanup          Perform cleanup"
            echo "  --logs             Show recent logs"
            echo "  --config           Show configuration"
            echo "  --help             Show this help"
            echo ""
            echo "EXAMPLES:"
            echo "  # Install and start monitoring"
            echo "  sudo $0 --install --start"
            echo ""
            echo "  # Emergency shutdown"
            echo "  sudo $0 --emergency"
            echo ""
            echo "  # Check status"
            echo "  $0 --status"
            ;;
        *)
            log_error "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
}

# Run main function
main "$@" 